language: cpp bc fastest

ide: doesn't matter as long as we can commit and push

input notes:
no edges from vertex to itself
can have forests

edge cases (check if these are legal): 
single vertex by itself, legal
cycle with two vertices (e.g. 1 is a prereq for 2, 2 is a prereq for 1), legal
connected component with 1 edge and 2 nodes (is this a good one?)

ideas:
we could eliminate some nodes before running the time-intensive algorithm
maybe count the number of outgoing and incoming edges and remove those first

algorithm pro con list:
arisha - first vertex


Dijkstra’s with fibonacci heap and other stuff:
Dijkstra’s algorithm runs in O(m) time plus the time required to perform the 
heap operations. There are n insert operations (counting one to insert s initially), 
n delete rnin operations, and at most m - n + 1 decrease operations. Dijkstra’s 
original implementation uses an array to represent the heap, giving a bound of 
O(1) time per insert or decrease and O(n) time per delete min, or O(n2) time 
overall. A more modern heap implementation, the Fibonacci heap [S], needs 0( 1) 
time per insert or decrease and only O(log n) per delete min, for an overall time 
bound of O(m + n log n). The same bound is attainable using relaxed heaps [7] or 
Vheaps [12]. 
A time of O(m + n log n) is best possible for Dijkstra’s algorithm, if the arc costs 
are real numbers and only binary comparisons are used in the heap implementa- 
tion. This is because it is easy to reduce the problem of sorting n numbers to a run 
of Dijkstra’s algorithm. The question arises whether the O(m + n log n) bound can 
be beaten in the special case that all the arc costs are integers of moderate size. 
This is the question we explore in this paper.
https://www.ise.ncsu.edu/fuzzy-neural/wp-content/uploads/sites/9/2016/02/ShortestPath.pdf





link:
https://code.visualstudio.com/docs/cpp/config-msvc#_prerequisites

